#+category: emacs
#+startup: content
* My Emacs Configuration
This is not a true literate configuration. Packages that demand complex configuration are configured in separate files. I am rewriting this configuration 
for a better understanding of my previous work and organizing it in a more sensible way.
** Table of contents                                              :noexport:
:PROPERTIES:
:TOC:      siblings
:END:
-  [[#dependencies-for-other-packages][Dependencies for other packages]]
  -  [[#built-in][Built-in]]
  -  [[#dashel][dash.el]]
  -  [[#f][f]]
  -  [[#ivy][Ivy]]
  -  [[#helm][Helm]]
  -  [[#posframe][posframe]]
  -  [[#hydra][Hydra]]
  -  [[#ov-overlays][ov (overlays)]]
  -  [[#ts-date-time-library-by-alphapapa][ts (date-time library by alphapapa)]]
  -  [[#org-ql][org-ql]]
  -  [[#all-the-icons][all-the-icons]]
  -  [[#emacsql-sqlite][emacsql-sqlite]]
  -  [[#memoize][memoize]]
  -  [[#desktop-integration][desktop integration]]
  -  [[#language-detection][language-detection]]
  -  [[#elexandria][elexandria]]
-  [[#appearances][Appearances]]
  -  [[#theme][Theme]]
  -  [[#frame-elements][Frame elements]]
  -  [[#typeface][Typeface]]
  -  [[#visual-enhancements][Visual enhancements]]
    -  [[#page-break-lines][page-break-lines]]
    -  [[#color-support-in-terminal-and-compilation-buffers][Color support in terminal and compilation buffers]]
    -  [[#colorize-color-names][Colorize color names]]
    -  [[#fontify-face][fontify-face]]
    -  [[#centralizing-window-contents][Centralizing window contents]]
-  [[#a-bunch-of-useful-features][A bunch of useful features]]
  -  [[#customizing-emacs][Customizing Emacs]]
  -  [[#pretty-hydras][Pretty hydras]]
  -  [[#terminal-and-shells][Terminal and shells]]
  -  [[#dired][Dired]]
  -  [[#file-operations][File operations]]
  -  [[#full-text-search-and-replace][Full-text search (and replace)]]
  -  [[#buffer-management][Buffer management]]
  -  [[#git][Git]]
  -  [[#project-management][Project management]]
  -  [[#experimenting-with-remote-apis][Experimenting with remote APIs]]
  -  [[#web-browser-integration][Web browser integration]]
  -  [[#templates][Templates]]
  -  [[#frequent-counsel-commands][Frequent counsel commands]]
  -  [[#avy][Avy]]
  -  [[#source-code-navigation][Source code navigation]]
  -  [[#outline-editing][Outline editing]]
  -  [[#referencing-and-reading][Referencing and reading]]
  -  [[#general-tools-for-editing-source-code][General tools for editing source code]]
  -  [[#editing-specific-types-of-formats][Editing specific types of formats]]
  -  [[#miscellaneous-commands][Miscellaneous commands]]
  -  [[#window-management][Window management]]
  -  [[#visual-cues-and-extra-information-display][Visual cues and extra information display]]
  -  [[#startup-buffer][Startup buffer]]
  -  [[#auto-saving][Auto saving]]
  -  [[#org-web-tools-and-clipurl][org-web-tools and clipurl]]
  -  [[#highlighting-parts-of-source-code-and-focusing][Highlighting part(s) of source code and focusing]]
  -  [[#development-workflow][Development workflow]]
  -  [[#scratch-buffers][Scratch buffers]]
  -  [[#debugging-emacs][Debugging Emacs]]
  -  [[#external-tools][External tools]]
  -  [[#optimization][Optimization]]
-  [[#writing][Writing]]
  -  [[#multi-lingual-support][Multi-lingual support]]
  -  [[#utilities][Utilities]]
  -  [[#using-org-mode][Using Org mode]]
  -  [[#markdown][Markdown]]
-  [[#programming-languages][Programming languages]]
  -  [[#elixir][Elixir]]
  -  [[#go][Go]]
  -  [[#haskell][Haskell]]
  -  [[#java][Java]]
  -  [[#javascript][JavaScript]]
  -  [[#lisp-emacs-lisp-and-common-lisp][Lisp (Emacs Lisp and Common Lisp)]]
  -  [[#purescript][PureScript]]
  -  [[#python][Python]]
  -  [[#rust][Rust]]
  -  [[#shell-scripts-bash][Shell scripts (bash)]]
  -  [[#vue][Vue]]
  -  [[#web-mode][Web-mode]]
-  [[#dsls][DSLs]]
  -  [[#bats][Bats]]
  -  [[#dhall][Dhall]]
  -  [[#dockerfile][Dockerfile]]
  -  [[#graphql][GraphQL]]
  -  [[#graphviz][GraphViz]]
  -  [[#mermaid][Mermaid]]
  -  [[#nix][Nix]]
  -  [[#pug][Pug]]
  -  [[#systemd][Systemd]]
  -  [[#svelte][Svelte]]
  -  [[#terraform][Terraform]]
  -  [[#yaml][YAML]]
-  [[#org-mode][Org mode]]
  -  [[#global-bindings-related-to-org-mode][Global bindings related to Org mode]]
  -  [[#recurring-tasks][Recurring tasks]]
  -  [[#org-journal][Org Journal]]
  -  [[#org-agenda-keybindings][Org-agenda keybindings]]
-  [[#exwm][EXWM]]
-  [[#meta][Meta]]
  -  [[#synchronizing-my-configuration-repositories][Synchronizing my configuration repositories]]
  -  [[#rebuild-packages][Rebuild packages]]
  -  [[#sort-entries-in-this-file][Sort entries in this file]]

** Dependencies for other packages
:PROPERTIES:
:TOC:      1
:CUSTOM_ID: dependencies
:ID:       ee01d40d-51af-4598-825e-dc79e4e0c394
:END:
These packages may be required by other packages loaded later on.
*** Built-in
#+begin_src emacs-lisp
(autoload 'setq-mode-local "mode-local")
#+end_src
*** dash.el
Quite a few packages depend on =dash.el= and/or =dash-functional.el=, so they should be loaded in the very beginning of package declarations.

#+begin_src emacs-lisp
  (use-package dash)
  (use-package dash-functional)
#+end_src
*** f
#+begin_src emacs-lisp
  (use-package f)
#+end_src
*** Ivy
#+begin_src emacs-lisp
  (akirak/require 'setup-ivy t)
#+end_src
*** Helm
#+begin_src emacs-lisp
  (akirak/require 'setup-helm t)
#+end_src
*** posframe
:PROPERTIES:
:CREATED_TIME: [2019-03-31 Sun 01:55]
:END:
#+begin_src emacs-lisp
  (akirak/require 'setup-posframe)
#+end_src
*** Hydra
#+begin_src emacs-lisp
  (akirak/require 'setup-hydra)
#+end_src

Bind ~M-SPC~ to =major-mode-hydra=.
This key was originally bound to =just-one-space=, but I replaced it with =akirak/shrink-whitespace=:

#+begin_src emacs-lisp
  (general-def "M-SPC" #'major-mode-hydra)

  (defconst akirak/major-mode-hydra-key "M-SPC")
#+end_src
*** ov (overlays)
#+begin_src emacs-lisp
(use-package ov
  :straight (ov :host github :repo "ShingoFukuyama/ov.el"))
#+end_src
*** ts (date-time library by alphapapa)
#+begin_src emacs-lisp
  (use-package ts
    :straight (ts :host github :repo "alphapapa/ts.el"))
#+end_src
*** org-ql
#+begin_src emacs-lisp
  (use-package org-ql
    :custom
    (org-ql-views nil))
#+end_src
*** all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    ;; I prefer install fonts using Nix
    ;; :preface
    ;; (defconst akirak/all-the-icons-status-file
    ;;   (no-littering-expand-var-file-name "all-the-icons"))
    ;; (defvar akirak/all-the-icons-fonts-installed
    ;;   (file-exists-p akirak/all-the-icons-status-file))
    ;; :config
    ;; (defun akirak/all-the-icons-install-fonts-if-missing ()
    ;;   (unless akirak/all-the-icons-fonts-installed
    ;;     (all-the-icons-install-fonts t)))
    ;; (defun akirak/all-the-icons-mark-as-fonts-installed ()
    ;;   (with-temp-buffer
    ;;     (write-file akirak/all-the-icons-status-file))
    ;;   (setq akirak/all-the-icons-fonts-installed t))
    ;; (advice-add #'all-the-icons-install-fonts
    ;;             :after #'akirak/all-the-icons-mark-as-fonts-installed)
    ;; (when (and (window-system)
    ;;            (not akirak/all-the-icons-fonts-installed))
    ;;   (all-the-icons-install-fonts))
    :general
    ("C-x 8 i" #'all-the-icons-ivy))
#+end_src
*** emacsql-sqlite
=emacsql-sqlite= depends on a pre-built binary executable. This is built and installed by Nix package manager.

#+begin_src emacs-lisp
  (use-package emacsql-sqlite
    :straight (emacsql-sqlite :type built-in)
    :if (akirak/library-exists-p "emacsql-sqlite"))
#+end_src
*** memoize
#+begin_src emacs-lisp
  (use-package memoize)
#+end_src
*** desktop integration
#+begin_src emacs-lisp
  (defun akirak/locate-xdg-desktop-file (desktop)
    (-some (lambda (root)
             (when (file-directory-p root)
               (car (directory-files-recursively root
                                                 (concat "^" (regexp-quote desktop) "$")
                                                 t))))
           counsel-linux-apps-directories))

  (defun akirak/get-xdg-desktop-window-class (desktop-file)
    (with-temp-buffer
      (insert-file-contents desktop-file)
      (goto-char (point-min))
      (when (re-search-forward (rx bol "StartupWmClass=") nil t)
        (buffer-substring-no-properties (point) (line-end-position)))))
#+end_src
*** language-detection
language-detection is used by eww.

#+begin_src emacs-lisp
  (akirak/require 'setup-language-detection)
#+end_src
*** elexandria
#+begin_src emacs-lisp
  (use-package elexandria
    :straight (:host github :repo "alphapapa/elexandria"))
#+end_src
** Appearances
*** Theme
- You can set the default theme using the customization interface.
- You can override the default theme at startup with =--theme= command line option, e.g. =emacs --theme poet=.

#+begin_src emacs-lisp
  (defcustom akirak/default-theme-module 'setup-dracula-theme
    "Symbol of a module to load the default theme."
    :type '(choice (const :tag "Dracula (dark bg)" setup-dracula-theme)
                   (const :tag "Poet (light bg, especially nice for Org mode)" setup-poet-theme)
                   (const :tag "Kaolin Light (light bg)" setup-kaolin-light-theme)
                   (const :tag "Doom Solarized Light" setup-doom-solarized-light-theme)
                   (const :tag "McCarthy (light bg)" setup-mccarthy-theme))
    :group 'akirak)

  (defun akirak/set-theme-from-command-line (_arg)
    (if-let ((theme-name (pop command-line-args-left)))
        (or (akirak/require (intern (concat "setup-" theme-name "-theme")))
            (progn
              (message "%s failed to load. Fallback to the default theme.")
              (akirak/require akirak/default-theme-module)))
      (error "--theme must be followed by a theme name")))

  (add-to-list 'command-switch-alist
               '("--theme" . akirak/set-theme-from-command-line))

  ;; If the option is not given, load the default theme.
  (unless (member "--theme" (cdr command-line-args))
    (akirak/require akirak/default-theme-module))
#+end_src

*** Frame elements
Due to consistency with other applications on computer, my eyes tend to stay in the upper area of a window. I prefer relying on the header line extensively rather than the modeline.

#+begin_src emacs-lisp
  (akirak/require 'setup-header-line t)
                                          ; Hide the mode line and use the header line
  (akirak/require 'setup-feebleline t)  ; Display extra information in the echo area

  ;; (akirak/require 'setup-centaur-tabs)
#+end_src
*** Typeface
This modules configures extra face attributes for typography. 
This feature is enabled if and only if a window system is
available.

#+begin_src emacs-lisp
  (cond
   ((window-system)
    (akirak/require 'setup-typeface2))
   ((daemonp)
    (defun akirak/init-typeface ()
      (let ((frame (make-frame `((window-system . ,(cl-case system-type
                                                     (darwin 'ns)
                                                     (windows-nt 'w32)
                                                     (t 'x)))
                                 (visibility . nil)))))
        (unwind-protect
            (progn
              (defun akirak/ad-around-font-family-list (orig &optional _frame)
                (funcall orig frame))
              (advice-add 'font-family-list :around #'akirak/ad-around-font-family-list)
              (akirak/require 'setup-typeface2)
              (advice-remove 'font-family-list #'akirak/ad-around-font-family-list))
          (delete-frame frame))))
    (add-hook 'after-init-hook #'akirak/init-typeface)))
#+end_src

If your operating system supports Docker, you can use [[https://github.com/akirak/fonts-container][fonts-container]] to install fonts used in the module.
*** Visual enhancements
**** page-break-lines
:PROPERTIES:
:CREATED_TIME: [2019-09-24 Tue 00:49]
:END:
#+begin_src emacs-lisp
(use-package page-break-lines
  :hook ((doc-mode
          emacs-lisp-mode
          compilation-mode
          outline-mode
          prog-mode
          haskell-mode
          help-mode
          magit-mode) . page-break-lines-mode))
#+end_src
**** Color support in terminal and compilation buffers
#+begin_src emacs-lisp
  (akirak/require 'setup-terminal-colors)
  #+end_src
**** Colorize color names
#+begin_src emacs-lisp
(use-package rainbow-mode
  ;; :diminish 'rainbow-mode
  :commands (rainbow-mode)
  :hook
  (prog-mode . (lambda () (rainbow-mode 1))))
#+end_src
**** fontify-face
#+begin_src emacs-lisp
(use-package fontify-face
  :hook
  (emacs-lisp . (lambda () (fontify-face-mode 1))))
#+end_src
**** Centralizing window contents
#+begin_src emacs-lisp
  (akirak/require 'setup-perfect-margin)
  #+end_src

I'm not using olivetti-mode

#+begin_src emacs-lisp
(use-package olivetti
  :disabled t
  :commands (turn-on-olivetti-mode)
  :custom (olivetti-body-width 92))
#+end_src
** A bunch of useful features
:PROPERTIES:
:TOC:      1
:ID:       7042f1a9-0cd3-4769-acda-a98d200f569b
:CUSTOM_ID: enhancements
:END:
#+begin_src emacs-lisp
  ;; desktop needs to be configured in prior to other convenience packages
  (akirak/require 'setup-desktop)
  (akirak/require 'setup-meta)
  (akirak/require 'setup-misc)
#+end_src

*** Customizing Emacs
#+begin_src emacs-lisp
  (akirak/require 'setup-custom)
#+end_src
*** Pretty hydras
#+begin_src emacs-lisp
  ;; C-c h
  (akirak/bind-user "h" #'akirak/minor-mode-hydra/body)
  (general-def [remap text-scale-adjust] 'akirak/appearance-hydra/body)
  (akirak/bind-user "k" #'akirak/window-layout-hydra/body)
#+end_src
**** Minor-mode-hydra: hydra for toggling minor modes
#+begin_src emacs-lisp
  (pretty-hydra-define akirak/minor-mode-hydra
    (:title "Minor modes"
            :foreign-keys nil
            :quit-key "q")
    ("Focus"
     (("v" view-mode :toggle t))
     "Info/check/linting"
     (("ed" eldoc-mode :toggle t)
      ("fc" flycheck-mode :toggle t)
      ("fv" flycheck-verify-setup)
      ("fs" flyspell-mode :toggle t)
      ("fp" flyspell-prog-mode :toggle t)
      ("ld" lsp-ui-doc-mode :toggle t)
      ("lp" lsp-ui-peek-mode :toggle t)
      ("ls" lsp-ui-sideline-mode :toggle t))
     "Edit/assistance"
     (("s" smartparens-mode :toggle t)
      ("S" smartparens-strict-mode :toggle t)
      ("y" lispy-mode :toggle t)
      ("el" electric-layout-mode :toggle t)
      ("ei" electric-indent-local-mode :toggle t)
      ("eq" electric-quote-local-mode :toggle t)
      ("ea" aggressive-indent-mode :toggle t)
      ("o" origami-mode :toggle t)
      ("W" whitespace-cleanup-mode))
     "Visual"
     (("w" whitespace-mode :toggle t)
      ("r" rainbow-delimiters-mode :toggle t)
      ("p" page-break-lines-mode :toggle t)
      ("n" line-number-mode :toggle t)
      ("hi" highlight-indent-guides-mode :toggle t)
      ("hc" fci-mode :toggle t))
     "LSP"
     (("lh" lsp-describe-session)
      ("lR" lsp-restart-workspace)
      ("lS" lsp-shutdown-workspace))))
#+end_src
**** Hydra for changing the appearance
:PROPERTIES:
:CREATED_TIME: [2019-07-27 Sat 22:11]
:END:
#+begin_src emacs-lisp
  (pretty-hydra-define akirak/appearance-hydra
    (:title (format "Font height: %d" akirak/font-height)
            :quit-key "q")
    ("Default font height"
     (("=" akirak/font-height-increase "increase")
      ("-" akirak/font-height-decrease "decrease")
      ("s" akirak/set-font-height "set temporarily")
      ("C-s" (customize-save-variable 'akirak/font-height akirak/font-height)
       "save"))
     "Buffer font height"
     (("+" text-scale-increase "increase")
      ("_" text-scale-decrease "decrease")
      ("!" text-scale-set "default"))
     ;; TODO: Add commands to change the theme and font families
     ;; "Faces"
     ;; (("t" akirak/load-theme-package "Change theme")
     ;;  ("f" akirak/configure-font-families "Font families"))
     "Inspect"
     (("c" describe-char))))
#+end_src
**** Hydra for managing window layouts
:PROPERTIES:
:CREATED_TIME: [2019-09-20 Fri 12:47]
:END:
#+begin_src emacs-lisp
  (pretty-hydra-define akirak/window-layout-hydra
    (:title (format "Layout\n Window size %sx%s"
                    (window-width)
                    (window-height))
            :quit-key "q")
    ("Window size"
     (("w" enlarge-window-horizontally "width+")
      ("W" shrink-window-horizontally "width-")
      ("h" enlarge-window "height+")
      ("H" shrink-window "height-")
      ("ah" (set-window-text-height (selected-window) current-prefix-arg) "abs h"))
     "Layout"
     (("b" balance-windows "Balance frm")
      ("B" (balance-windows (selected-window)) "Balance win")
      ("s" split-window-below "Split below")
      ("v" split-window-right "Split right")
      ("d" delete-window "Delete win"))
     "Switch win/buf"
     (("j" other-window "Next win")
      ("k" (other-window -1) "Prev win")
      ("l" counsel-ibuffer "Switch buf"))
     "Extra windows"
     (("tt" treemacs)
      ("te" akirak/toggle-flycheck-error-list "flycheck")
      ("ti" imenu-list-smart-toggle "imenu")
      ("tb" ibuffer-sidebar "buffers"))
     "Views"
     (("pv" ivy-pop-view "pop")
      ("pV" ivy-push-view "push")
      ("ps" ivy-switch-view "switch"))))

  (defun akirak/toggle-flycheck-error-list ()
    (interactive)
    (if-let ((window (get-buffer-window "*Flycheck errors*")))
        (quit-window nil window)
      (flycheck-list-errors)))
#+end_src
*** Terminal and shells
**** Using vterm
I will use vterm.

#+begin_src emacs-lisp
  (akirak/require 'setup-vterm)
#+end_src

To open a terminal, use =vterm-toggle=. =vterm-toggle-cd= command supports tramp.

#+begin_src emacs-lisp
  (akirak/bind-user "t" #'akirak/vterm-toggle-cd)
#+end_src
*** Dired
#+begin_src emacs-lisp
  (general-def "C-x C-j" #'dired-jump)
#+end_src
*** File operations
#+begin_src emacs-lisp
  (akirak/require 'setup-files)
#+end_src
*** Full-text search (and replace)                                 :search:
#+begin_src emacs-lisp
  (akirak/bind-search
    "M-f" #'org-recoll-search)
#+end_src
**** Recoll
#+begin_src emacs-lisp
  (akirak/require 'setup-recoll)
#+end_src
*** Buffer management
#+begin_src emacs-lisp
  ;; buffer management
  (general-def
    "<f5>" 'revert-buffer
    "C-x k" #'kill-this-buffer  
    "C-x C-b" #'ibuffer)
#+end_src
*** Git
**** Git modes
#+begin_src emacs-lisp
(use-package git-modes)
#+end_src
**** Git attr linguist
#+begin_src emacs-lisp
(use-package git-attr-linguist
  :straight git-attr
  :commands (git-attr-linguist)
  :hook (find-file . git-attr-linguist))
#+end_src
**** Magit-Todos
#+begin_src emacs-lisp
  (use-package magit-todos
    :after magit
    :config
    (unless (akirak/windows-subsystem-for-linux-p)
      (magit-todos-mode 1))
    :custom
    (magit-todos-depth 0)
    (magit-todos-exclude-globs '("**/*.map")))
#+end_src
**** GitHub/GitLab workflow
Create a prefix key for =browse-at-remote=-variant commands:

#+begin_src emacs-lisp
  (general-create-definer akirak/bind-browse-at-remote :prefix "C-x w"
    :wk "browse-at-remote")
#+end_src

Use =forge= for working with GitHub and GitLab repositories:

#+begin_src emacs-lisp
  (akirak/require 'setup-github)
#+end_src

To create/fork a repository on GitHub, use =hub= CLI.

=github-review.el= looks useful for reviewing pull requests on GitHub, but I seldom receive pull requests, so I have never used it.
***** Browse-at-remote
=browse-at-remote= is another package that lets you browse a corresponding web page of the file.

#+begin_src emacs-lisp
  (use-package browse-at-remote
    :commands (browse-at-remote))

  (akirak/bind-browse-at-remote
    "l" #'browse-at-remote
    "k" #'browse-at-remote-kill)
#+end_src

Differences between =browse-at-remote= and equivalent commands from =forge= package:

- =browse-at-remote= provides =browse-at-remote-kill= command.
- =browse-at-remote= opens a link with a line number.
**** Cloning Git repositories
[[file:setup/setup-git-clone.el::(defun%20akirak/git-clone%20(url)][akirak/git-clone]] function lets you clone a Git repository to a designated location from a Git repository, a GitHub repository page, or a path on GitHub (=account/name=). It is integrated with ivy-clipurl, so you can clone a Git repository from its web page URL in the clipboard.
**** Vc-Msg
#+begin_src emacs-lisp
  (akirak/require 'setup-vc-msg)

  (akirak/bind-user "v" #'vc-msg-show)
#+end_src
**** Magit-List-Repositories
=magit-list-repositories= is a convenient command which lets you browse your repositories on the file system.

To use it, you first have to customize =magit-repository-directories=.
*** Project management
**** EditorConfig
#+begin_src emacs-lisp
(use-package editorconfig
  :config
  (editorconfig-mode 1))
#+end_src
**** DirEnv
#+begin_src emacs-lisp
  (akirak/require 'setup-direnv)
  #+end_src
*** Experimenting with remote APIs
#+begin_src emacs-lisp
  (akirak/require 'setup-verb)
#+end_src
*** Web browser integration
#+begin_src emacs-lisp
  (akirak/require 'setup-browse-url)
#+end_src

#+begin_src emacs-lisp
(use-package atomic-chrome
  :disabled t
  :init
  (atomic-chrome-start-server))
#+end_src

Emacs also provides eww:

#+begin_src emacs-lisp
  (akirak/require 'setup-eww)
#+end_src
*** Templates
#+begin_src emacs-lisp
  (akirak/require 'setup-expansion)
#+end_src
**** File templates
#+begin_src emacs-lisp
  (akirak/require 'setup-autoinsert)
  #+end_src
*** Frequent counsel commands                                  :navigation:
#+begin_src emacs-lisp
  (general-def
    "C-x /" #'counsel-rg
    "C-x F" #'counsel-recentf
    "C-x L" #'counsel-locate)
#+end_src
*** Avy                                                        :navigation:
#+begin_src emacs-lisp
  (akirak/require 'setup-avy)
#+end_src

=link-hint= is not part of =avy= package, but it is covenient for following a link:

#+begin_src emacs-lisp
  (akirak/bind-jump "f" 'akirak/link-hint-open-link)
#+end_src
*** Source code navigation                                     :navigation:
**** dumb-jump
:PROPERTIES:
:CREATED_TIME: [2019-09-24 Tue 00:30]
:END:
#+begin_src emacs-lisp
  (use-package dumb-jump
    ;; Don't enable dumb-jump-mode. Bind only necessary commands.
    :custom
    (dumb-jump-selector 'ivy))

  (akirak/bind-jump
    ". " #'dumb-jump-go
    "," #'dumb-jump-back)
#+end_src
**** IMenu
:PROPERTIES:
:CREATED_TIME: [2019-09-24 Tue 00:30]
:END:
#+begin_src emacs-lisp
  (akirak/bind-search "i" 'counsel-imenu)

  (akirak/bind-search :package 'org :keymaps 'org-mode-map
    "i"
    (defun akirak/helm-org-ancestors ()
      (interactive)
      (unless (derived-mode-p 'org-mode)
        (user-error "Not in org-mode"))
      (let (result
            preselect)
        (save-excursion
          (org-back-to-heading)
          (cl-flet
              ((add-candidate
                ()
                (let ((start (point-at-bol))
                      (end (point-at-eol)))
                  (font-lock-ensure start end)
                  (let ((cand (buffer-substring start end)))
                    (push (cons cand (point-marker))
                          result)
                    ;; Pre-select the first candidate, i.e. the current heading.
                    (unless preselect
                      (setq preselect cand))))))
            (add-candidate)
            (while (> (org-outline-level) 1)
              (org-up-heading-all 1)
              (add-candidate))))
        (helm :sources (helm-build-sync-source "Ancestor headings"
                         :candidates result
                         :action 'helm-org-headings-actions)
              :keymaps 'helm-org-headings-map
              :preselect preselect)))

    ;; Simply browse headings in the buffer.
    ;; "i" #'helm-org-in-buffer-headings
    )

  (akirak/bind-search :package 'restclient-helm :keymaps 'restclient-mode-map
    "i" #'helm-restclient)
#+end_src

=imenu-list= is a useful package which displays an overview of the current buffer.
I've added it to =akirak/window-layout-hydra=.

#+begin_src emacs-lisp
  (akirak/require 'setup-imenu-list)
  #+end_src
**** Outline navigation                                       :navigation:
#+begin_src emacs-lisp
  (akirak/bind-search "o" 'counsel-outline)
  (akirak/bind-search :package 'org :keymaps 'org-mode-map
    "o" #'helm-org-ql)
#+end_src
*** Outline editing                                              :outlines:
#+begin_src emacs-lisp
  (general-def :keymaps 'outline-minor-mode-map :package 'outshine
    "M-RET" 'outshine-insert-heading)
  (general-unbind :keymaps 'lispy-mode-map :package 'lispy "M-RET")
#+end_src

#+begin_src emacs-lisp
  (akirak/require 'setup-origami)
#+end_src
*** Referencing and reading                                   :referencing:
#+begin_src emacs-lisp
(akirak/require 'setup-referencing)
#+end_src

**** PDF
Use =pdf-tools=.

=pdf-tools= is installed using Nix.
**** EPUB
#+begin_src emacs-lisp
  (akirak/require 'setup-epub)
#+end_src
**** Pocket
Read =pocket-reader= to read web pages on Emacs.
#+begin_src emacs-lisp
(akirak/require 'setup-pocket)
#+end_src
**** Annotating documents
You can use org-noter to annotate PDF documents as well as other formats supported by doc-view.

I will bind ~A~ to =org-noter= both in =pdf-tools= and =doc-view=:

#+begin_src emacs-lisp
  (general-def :keymaps 'doc-view-mode-map :package 'doc-view
    "A" #'org-noter)

  (general-def :keymaps 'pdf-view-mode-map :package 'pdf-view
    "A" #'org-noter)
#+end_src
*** General tools for editing source code
:PROPERTIES:
:CREATED_TIME: [2019-06-11 Tue 22:30]
:END:
#+begin_src emacs-lisp
(akirak/require 'setup-edit)
#+end_src
**** Expand Region
#+begin_src emacs-lisp
  (akirak/require 'setup-expand-region)
#+end_src
**** Formatting
:PROPERTIES:
:CREATED_TIME: [2019-09-23 Mon 22:48]
:END:
I am using reformatter.

#+begin_src emacs-lisp
  (akirak/require 'setup-reformatter)
#+end_src
**** Search and replace
I prefer =swiper== and =counsel-rg=.
I added additional keybindings to the keymaps of those commands, so I can now dispatch an occur/noccur session from those commands.

#+begin_src emacs-lisp
(akirak/require 'setup-occur)
#+end_src

Another useful command is =projectile-replace= (and its regexp variant =projectile-replace-regexp=).

Resources:

- [[https://with-emacs.com/posts/tutorials/using-occur-for-search-and-replace-across-files/][with-emacs · Using Occur for Search and Replace across Files]]
- [[https://with-emacs.com/posts/tutorials/search-and-replacement-techniques/][with-emacs · Search and Replacement Techniques]]
**** Commenting
#+begin_src emacs-lisp
(use-package comment-dwim-2
  :general
  ("M-;" 'comment-dwim-2))
#+end_src
**** Case conversion
#+begin_src emacs-lisp
(use-package fix-word
  :commands (fix-word-upcase fix-word-downcase fix-word-capitalize)
  :hook
  (prog-mode . (lambda () (setq fix-word-thing 'symbol)))
  :general
  ([remap upcase-word] 'fix-word-upcase
   [remap downcase-word] 'fix-word-downcase
   [remap capitalize-word] 'fix-word-capitalize))
#+end_src

#+begin_src emacs-lisp
  (akirak/require 'setup-string-inflection)
  #+end_src
**** Highlighting todos via hl-todo
Use hl-todo by tarsius

#+begin_src emacs-lisp
  (use-package hl-todo
    :config
    (akirak/bind-search :keymaps 'hl-todo-mode-map
      "t" #'hl-todo-occur)
    (akirak/bind-jump :keymaps 'hl-todo-mode-map
      "t" #'hl-todo-next
      "r" #'hl-todo-previous)
    (general-add-hook 'hl-todo-keyword-faces
                      '(("REVIEW" . "DarkOrange3")
                        ("OPTIMIZE" . "LightSeaGreen")))
    :hook
    (prog-mode . hl-todo-mode))
#+end_src

There is another package named comment-tags for the same purpose, but I won't use it since there is hl-todo

#+begin_src emacs-lisp
  (use-package comment-tags
    :disabled t
    :hook (prog-mode . comment-tags-mode)
    :custom
    (comment-tags-case-sensitive t)
    (comment-tags-comment-start-only t))
#+end_src
*** Editing specific types of formats
:PROPERTIES:
:CREATED_TIME: [2019-06-11 Tue 22:27]
:END:
Deprecated. Use =web-mode=.

#+begin_src emacs-lisp
  ;; (akirak/require 'setup-tagedit)
#+end_src
*** Miscellaneous commands
**** Switching to an Org window
#+begin_src emacs-lisp
  (defvar org-select-window-last-window nil)

  (defun org-select-window (arg)
    (interactive "P")
    (if arg
        (progn
          (when org-select-window-last-window
            (select-window org-select-window-last-window)
            (setq org-select-window-last-window nil)))
      (let* ((wlist (window-list))
             (i0 (-elem-index (selected-window) wlist))
             (queue (append (-slice wlist (1+ i0))
                            (-take i0 wlist)))
             (w (-find (lambda (w)
                         (with-current-buffer (window-buffer w)
                           (derived-mode-p 'org-mode)))
                       queue)))
        (if w
            (progn
              (unless (derived-mode-p 'org-mode)
                (setq org-select-window-last-window (selected-window)))
              (select-window w))
          (message "No other org window in this frame")))))
#+end_src
**** modi/org-split-block
#+begin_src emacs-lisp
  (use-package modi-org-split-block
    :straight nil
    :load-path "contrib/modi")
  (general-def :package 'org :keymaps 'org-mode-map
    [remap org-meta-return] 'modi/org-meta-return)
#+end_src
*** Window management
:PROPERTIES:
:CREATED_TIME: [2018-12-31 Mon 05:04]
:END:
#+begin_src emacs-lisp
(akirak/bind-user
  "u" #'winner-undo-repeat)
#+end_src

#+begin_src emacs-lisp
  (defun akirak/switch-to-last-buffer-other-window ()
    (interactive)
    (switch-to-buffer-other-window (other-buffer)))

  (general-def ctl-x-map
    "B" #'akirak/switch-to-last-buffer-other-window)
#+end_src

I created a hydra for managing frames and windows.

#+begin_src emacs-lisp
  (general-def "M-o" #'ace-window)
  ;; You can also display the help from the start
  ;; (akirak/bind-key "M-o" #'aw-show-dispatch-help)
  (general-unbind :keymaps 'lispy-mode-map :package 'lispy "M-o")
#+end_src
**** Other packages for window management
#+begin_src emacs-lisp
(use-package fwb-cmds
  :straight (fwb-cmds :host github :repo "tarsius/fwb-cmds"))
(use-package buffer-move
  :commands (buf-move-up buf-move-down buf-move-left buf-move-right))
(use-package window-go
  :straight (window-go :host github :repo "akirak/emacs-window-go"))
#+end_src
*** Visual cues and extra information display

Additional visual cues can increase productivity, but they can be noisy at the same time. Therefore I need to justify each package added to my config.

**** Beacon
I often lose sight of the cursor when I switch to another window, so this is necessary.
#+begin_src emacs-lisp
  (use-package beacon           ; Highlight the cursor on certain events
    :disabled t
    :unless (akirak/windows-subsystem-for-linux-p)
    :config
    (general-add-hook 'beacon-dont-blink-commands
                      '(akirak/scroll-half-page-forward
                        akirak/scroll-half-page-backward))
    (beacon-mode 1))
#+end_src
**** Rainbow-delimiters
This is especially useful in editing Lisp code.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters         ; Colourize parentheses in source code
    :hook
    ((lisp-mode
      emacs-lisp-mode
      elixir-mode
      haskell-mode
      purescript-mode
      ) . rainbow-delimiters-mode))
#+end_src
**** Dimmer
This package makes the focused window stands out by dimming the other windows. However, the dimness should be kept small to make referenced text readable.
#+begin_src emacs-lisp
  (akirak/require 'setup-dimmer)
#+end_src
**** Git-gutter
This lets you know which parts of the buffers are modified since the last commit.
#+begin_src emacs-lisp
  (use-package git-gutter
    :diminish git-gutter-mode
    :init
    (global-git-gutter-mode))

  (akirak/bind-jump
    "j" #'git-gutter:next-hunk
    "k" #'git-gutter:previous-hunk)

  (general-advice-add '(git-gutter:next-hunk
                        git-gutter:previous-hunk)
                      :around
                      (defun akirak/git-gutter-follow-up-navigation (orig &rest args)
                        (when (buffer-narrowed-p)
                          (widen))
                        (let ((pos (point)))
                          (prog1 (apply orig args)
                            (unless (eq pos (point))
                              (when (derived-mode-p 'org-mode)
                                (org-show-context)))))))

  (akirak/bind-user
    "g" 'git-gutter:mark-hunk)
#+end_src
**** Highlight-indent-guides
This is helpful in programming languages that depend on indentation levels.
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :config
    (defun akirak/turn-on-highlight-indent-guides-mode ()
      (interactive)
      (highlight-indent-guides-mode 1))
    :hook
    ((python-mode nim-mode yaml-mode)
     . akirak/turn-on-highlight-indent-guides-mode))
#+end_src
**** Prism
#+begin_src emacs-lisp
  (akirak/require 'setup-prism)
#+end_src
**** Column-enforce-mode
#+begin_src emacs-lisp
  (use-package column-enforce-mode
    :disabled t
    :hook
    ((prog-mode markdown-mode)
     . 80-column-rule))
#+end_src
**** Fill-column-indicator
Visualise (usually) 80 columns.
#+begin_src emacs-lisp
  (use-package fill-column-indicator
    :unless (akirak/windows-subsystem-for-linux-p)
    :disabled t
    :init
    (add-hook 'prog-mode-hook 'fci-mode))
#+end_src
**** Whitespace
Visualise unnecessary, extra whitespace characters in source code.

#+begin_src emacs-lisp
  (akirak/require 'setup-whitespace)
  #+end_src
**** Manual highlighting
***** Symbol overlays
#+begin_src emacs-lisp
  (use-package symbol-overlay
    :commands (symbol-overlay-put symbol-overlay-mode)
    :config

    (akirak/bind-search
      "s"
      (defun akirak/symbol-overlay-jump ()
        (interactive)
        (let* ((name (completing-read "Highlighted symbol: "
                                      (-map #'car symbol-overlay-keywords-alist)))
               (x (assoc name symbol-overlay-keywords-alist))
               (face (cddr x))
               (initial (point))
               pos)
          (goto-char (point-min))
          (unless (catch 'finish
                    (while (setq pos (next-single-char-property-change (point) 'face))
                      (goto-char pos)
                      (when (eq face (get-char-property pos 'face))
                        (throw 'finish t))))
            (goto-char initial))))))


#+end_src
***** Visual bookmarks
#+begin_src emacs-lisp
  (akirak/require 'setup-bm)
  #+end_src
*** Startup buffer
By default, =*Messages*= buffer is shown at startup.

#+begin_src emacs-lisp
  (akirak/require 'setup-initial-buffer)
#+end_src

*** Auto saving
Files are automatically saved on certain events by =super-save-mode=:

#+begin_src emacs-lisp
  (akirak/require 'setup-super-save)
#+end_src
*** org-web-tools and clipurl
[[https://github.com/alphapapa/org-web-tools][org-web-tools]] is handy, but commands in the package often fail to retrieve a proper URL I want to operate on. Therefore I created =clipurl= package to pick a URL from the kill ring.

#+begin_src emacs-lisp
  (akirak/require 'setup-org-web-tools)

  (defun akirak/insert-previous-url-link ()
    (interactive)
    (if current-prefix-arg
	(call-interactively 'ivy-clipurl)
      ;; Use ivy-clipurl in place of org-web-tools-insert-link.
      (let ((ivy-clipurl-default-action 'clipurl-insert-url-dwim)
	    (ivy-clipurl-prompt "Choose a URL to insert: "))
	(call-interactively 'ivy-clipurl))
      ;; (call-interactively 'org-web-tools-insert-link-for-url)
      ))

  (akirak/bind-user "w" 'akirak/insert-previous-url-link)
#+end_src

To visit a URL, use =browse-url-at-point=:

#+begin_src emacs-lisp
  (akirak/bind-user "o" #'browse-url-at-point)
#+end_src

*** Highlighting part(s) of source code and focusing
:PROPERTIES:
:CREATED_TIME: [2019-01-25 Fri 22:47]
:END:

- bm (visual bookmarks)
- symbol-overlay

#+begin_src emacs-lisp
(akirak/bind-user
  "b" 'helm-bm
  "m" 'bm-toggle
  "s" 'symbol-overlay-put)
#+end_src

#+begin_src emacs-lisp
  (general-def
    "C-x n" #'akirak/narrow-or-widen-dwim)

  (general-def :keymaps 'org-mode-map
    "C-x n" #'akirak/narrow-or-widen-dwim)
#+end_src

*** Development workflow
#+begin_src emacs-lisp
  (general-def
    "<f9>" 'recompile)
#+end_src
*** Scratch buffers
#+begin_src emacs-lisp
;; Development
(akirak/bind-user
  "i" 'scratch)
#+end_src
*** Debugging Emacs
#+begin_src emacs-lisp
(akirak/require 'setup-debug-emacs)
#+end_src
*** External tools
**** Storage management
#+begin_src emacs-lisp
  (akirak/require 'setup-storage)
#+end_src
**** Background services
#+begin_src emacs-lisp
  (akirak/require 'setup-services)
#+end_src
**** Personal finance (beancount)
#+begin_src emacs-lisp
  (akirak/require 'setup-beancount)
#+end_src
*** Optimization
#+begin_src emacs-lisp
  (akirak/require 'optimize-minibuf)
#+end_src
**** Startup
Use =benchmark-init= for profiling of the startup time.

#+begin_src emacs-lisp
(akirak/require 'setup-init-time-log)
#+end_src
** Writing
:PROPERTIES:
:TOC:      1
:END:
*** Multi-lingual support
:PROPERTIES:
:CREATED_TIME: [2019-03-23 Sat 16:36]
:END:

A modules for supporting a natural language should follow the naming convention of =setup-LANGUAGE-SYSTEM=. For example, =setup-chinese-pyim= is a Chinese support through =pyim.el=.

You can customize a list of modules for supported languages through the following variable. This setting can be done per machine, so different machines can support different languages:

#+begin_src emacs-lisp
  (defcustom akirak/enabled-language-supports
    nil
    "List of enabled modules for supporting natural languages other than English.

  These modules are loaded at startup.

  I also suggest you set `default-input-method' to your preferred
  input method in the environment."
    :group 'akirak
    :type '(set (const :tag "Japanese/日本語 (mozc)" setup-japanese-mozc)
                (const :tag "Chinese/简体中文 (pyim)" setup-chinese-pyim)
                (const :tag "Japanese/日本語 (SKK)" setup-japanese-skk))
    :set (lambda (sym value)
           (set sym value)
           (dolist (module value)
             (akirak/require module))
           (when (= 1 (length value))
             (setq default-input-method
                   (string-remove-prefix "setup-" (symbol-name (car value)))))))
#+end_src

I don't set the default input method here. Set =default-input-method= in your =custom-file=. 

#+begin_src emacs-lisp
  (akirak/require 'setup-language-tools)
#+end_src
*** Utilities
#+begin_src emacs-lisp
  (akirak/require 'setup-writing)
#+end_src
**** Spell checking with flyspell
I will use [[https://github.com/d12frosted/flyspell-correct][flyspell-correct]] to run flyspell.

- =flyspell-correct-wrapper= is the main entry point to the package.
  I bind ~C-c f~ to the command.
  - When =flyspell-mode= is not on, the key sequence turns the mode on.

#+begin_src emacs-lisp
  (akirak/bind-user
    "f" #'flyspell-mode)

  (akirak/bind-user :keymaps 'flyspell-mode-map
    "f" #'flyspell-correct-wrapper)
#+end_src
**** Quotation marks
***** Typo
Typo.el is a successor to [[https://www.emacswiki.org/emacs/TypographicalPunctuationMarks][typopunct.el]].

Note it doesn’t support CJK languages.
It can be useful for European languages.
**** Counting words
Use =wc-mode= or =org-wc= for counting words.
**** WriteGood mode
- [[http://bnbeckwith.com/code/writegood-mode.html][WriteGood Mode]]
- [[http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/][3 shell scripts: Kill weasel words, avoid the passive, eliminate duplicates]]
*** Using Org mode
Set basic options for org-mode:

#+begin_src emacs-lisp
  (akirak/require 'setup-org t)
  ;; Use org-edna for dependency management
  (akirak/require 'setup-org-edna)

  ;; org-starter should be loaded after org is loaded
  (akirak/require 'setup-org-starter)
#+end_src
**** Org hydra
Use major-mode-hydra to define a hydra for Org mode:

#+begin_src emacs-lisp
  (akirak/require 'setup-org-hydra)
#+end_src
**** Org-babel
#+begin_src emacs-lisp
  (akirak/require 'setup-org-babel t)
#+end_src
**** Exporting
- Exporting to Hugo

#+begin_src emacs-lisp
  (akirak/require 'setup-ox)
  (akirak/require 'setup-org-hugo)
#+end_src
*** Markdown
Markdown is supported as well:

#+begin_src emacs-lisp
  (akirak/require 'setup-markdown)
#+end_src
** Programming languages
:PROPERTIES:
:TOC:      1
:sort:     a
:END:
Ideally, this section should be a portfolio of my skills.
*** Elixir

#+begin_src emacs-lisp
  (akirak/require 'setup-elixir)
#+end_src
*** Go
#+begin_src emacs-lisp
  (akirak/require 'setup-go)
#+end_src
*** Haskell

#+begin_src emacs-lisp
  (akirak/require 'setup-haskell)
#+end_src

*** Java
Use lsp-mode.
*** JavaScript
#+begin_src emacs-lisp
  (akirak/require 'setup-javascript)
  (akirak/require 'setup-json)
#+end_src
*** Lisp (Emacs Lisp and Common Lisp)
#+begin_src emacs-lisp
  (akirak/require 'setup-emacs-lisp)
#+end_src
**** Hydra
#+begin_src emacs-lisp
  (major-mode-hydra-define emacs-lisp-mode
    (:title "emacs-lisp-mode"
            :quit-key "q")
    ("file/buffer"
     (("e" akirak/eval-buffer-or-load-file "Eval or load file")
      ("l" package-lint-current-buffer "package-lint")
      ("pb" (straight-rebuild-package (file-name-base (buffer-file-name)))
       "Rebuild package" :exit nil)
      ("pl" (load-library (file-name-base (buffer-file-name)))
       "Load library" :exit nil))
     "point"
     (("m" pp-macroexpand-last-sexp "macroexpand")
      ("tb" buttercup-run-at-point "buttercup"))
     "help/references"
     (("s" suggest)
      ("i" counsel-info-lookup-symbol "info symbol"))))
#+end_src
*** PureScript
#+begin_src emacs-lisp
  (akirak/require 'setup-purescript)
#+end_src
*** Python
*** Rust
:PROPERTIES:
:CREATED_TIME: [2019-01-01 Tue 15:54]
:ID:       e15d3e74-9760-4e6f-ba18-9cb337758247
:END:
:LOGBOOK:
CLOCK: [2019-01-01 Tue 15:54]--[2019-01-01 Tue 15:56] =>  0:02
:END:
#+begin_src emacs-lisp
  (use-package rust-mode)
#+end_src

*** Shell scripts (bash)
#+begin_src emacs-lisp
  (akirak/require 'setup-shell-scripts)
#+end_src
*** Vue
:PROPERTIES:
:CREATED_TIME: [2019-04-03 Wed 22:45]
:END:
#+begin_src emacs-lisp
  (akirak/require 'setup-vue)
#+end_src
*** Web-mode
#+begin_src emacs-lisp
  (akirak/require 'setup-web-mode)
#+end_src

Restclient is useful for development in teams where it is used.

#+begin_src emacs-lisp
  (akirak/require 'setup-restclient)
#+end_src
**** CSS
#+begin_src emacs-lisp
  (akirak/require 'setup-css)
#+end_src
** DSLs
:PROPERTIES:
:TOC:      1
:sort:     a
:END:
*** Bats                                               :testing__framework:
:PROPERTIES:
:CREATED_TIME: [2019-07-17 Wed 22:25]
:END:
#+begin_src emacs-lisp
  (use-package bats-mode)
#+end_src
*** Dhall                                         :configuration__language:
#+begin_src emacs-lisp
  (akirak/require 'setup-dhall)
#+end_src
*** Dockerfile                                    :configuration__language:

#+begin_src emacs-lisp
  (akirak/require 'setup-dockerfile)
#+end_src
*** GraphQL
#+begin_src emacs-lisp
  (akirak/require 'setup-graphql)
#+end_src
*** GraphViz                                           :diagramming:org_babel:
#+begin_src emacs-lisp
(akirak/require 'setup-graphviz-dot)
#+end_src
*** Mermaid                                         :diagramming:org_babel:
#+begin_src emacs-lisp
  (akirak/require 'setup-mermaid)
#+end_src
*** Nix                                           :configuration__language:
#+begin_src emacs-lisp
  (akirak/require 'setup-nix)
#+end_src
*** Pug                                                :template__language:
#+begin_src emacs-lisp
  (akirak/require 'setup-pug)
#+end_src
*** Systemd                                       :configuration__language:
#+begin_src emacs-lisp
(akirak/require 'setup-systemd)
#+end_src
*** Svelte
#+begin_src emacs-lisp
  (akirak/require 'setup-svelte)
#+end_src
*** Terraform
#+begin_src emacs-lisp
  (akirak/require 'setup-terraform)
#+end_src
*** YAML                                          :configuration__language:
#+begin_src emacs-lisp
  (akirak/require 'setup-yaml)
#+end_src
**** Ansible
#+begin_src emacs-lisp
  (akirak/require 'setup-ansible)
#+end_src
** Org mode
*** Global bindings related to Org mode
 #+begin_src emacs-lisp
   (akirak/bind-jump "M-j" #'counsel-org-clock-goto)
   (akirak/bind-search "M-c" #'counsel-org-clock-context)
   (akirak/bind-user
     "c" #'org-capture
     "l" 'org-store-link)
 #+end_src
*** Recurring tasks
#+begin_src emacs-lisp
  (akirak/require 'setup-org-recur)
#+end_src
*** Org Journal
#+begin_src emacs-lisp
  (akirak/require 'setup-org-journal)
#+end_src
*** Org-agenda keybindings                                :Emacs:Org__Mode:
:PROPERTIES:
:CREATED_TIME: [2019-01-19 Sat 12:22]
:END:
:LOGBOOK:
CLOCK: [2019-01-19 Sat 12:22]--[2019-01-19 Sat 12:25] =>  0:03
:END:

#+begin_src emacs-lisp
  (general-def org-agenda-mode-map :package 'org-agenda
    "M-n" #'org-agenda-drag-line-forward
    "M-p" #'org-agenda-drag-line-backward)
#+end_src
** COMMENT Multiple major modes                                   :noexport:
:PROPERTIES:
:TOC:      ignore
:END:
Some package need to be loaded after other packages, so they are put here.
** EXWM
#+begin_src emacs-lisp
  (when (member "--exwm" command-line-args)
    (akirak/require 'setup-exwm)
    (exwm-enable))

  (add-to-list 'command-switch-alist '("--exwm" . (lambda (_) nil)))
#+end_src

When you connect/disconnect to an external monitor, run =akirak/exwm-configure-screens= command, unless it is automatically called by the screen change hook.

** Meta
*** Synchronizing my configuration repositories
I am now using myrepos to synchronize my configuration repositories.

#+begin_src emacs-lisp
  (defun akirak/mr-update ()
    "Run 'mr update' in the home directory."
    (interactive)
    (save-some-buffers)
    (let ((default-directory "~"))
      (akirak/run-interactive-shell-command "mr update")))

  (defalias 'akirak/update-configuration 'akirak/mr-update)
#+end_src

#+begin_src emacs-lisp
  (defun akirak/mr-push ()
    (interactive)
    (let ((default-directory "~"))
      (akirak/run-interactive-shell-command "mr push")))
#+end_src
*** Rebuild packages
#+begin_src emacs-lisp
  (akirak/require 'setup-straight)
#+end_src
*** Sort entries in this file
#+begin_src emacs-lisp
  (defun akirak/org-sort-entries-as-desired ()
    (interactive)
    (org-with-wide-buffer
     (goto-char (point-min))
     (while (re-search-forward (org-re-property "sort") nil t)
       (let ((line (thing-at-point 'line t)))
         (if (string-match org-property-re line)
             (pcase (match-string 3 line)
               ("a" (org-sort-entries nil ?a)))
           (error "Property didn't match")))
       (org-end-of-subtree)))
    (when (org-find-property "TOC")
      (org-make-toc)))
#+end_src
*** COMMENT Ignore                                                       :noexport:
:PROPERTIES:
:TOC:      ignore
:END:
# Local Variables:
# org-id-link-to-org-use-id: nil
# eval: (when (fboundp 'org-make-toc-mode) (org-make-toc-mode t))
# End:
