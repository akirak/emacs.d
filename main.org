* My Emacs Configuration
This is not a true literate configuration. Packages that demand complex configuration are configured in separate files. I am rewriting this configuration 
for a better understanding of my previous work and organizing it in a more sensible way.
** Why?
*** Literate configuration in Org mode
Quite a few people maintain their Emacs configuration in a single literate Org file. I didn't like the idea, but I have to admit that it offers several benefits.
**** Pros
- You can quickly add a piece of configuration by refiling a subtree to the file from another location, e.g. your inbox Org file.
- You'll be exposed to a constant pressure to maintain a consistent structure, so the configuration will be more consistent.
- Each piece of configuration gets an explicit context.
**** Cons
- It is slightly more tedious to edit the literate config in Org mode. Rather than edit a file directly, you have to pop up an edit buffer for each piece of configuration you want to change.
- Revision history is lost when entries are reordered. This can be prevented by automatically sorting all headings before saving.
*** Organizational policies
I will combine both a literate configuration file and separate configuration files:

- The main configuration file is a single Org file containing babel source blocks. Simple package configurations can be put directly in the file.
- Complex package configurations are put in separate files, because they are likely to entail bugfixes and updates.
- However, certain kinds of configuration code to integrate those packages can be put in the Org configuration file. Keybindings and frame (frame-workflow) configurations are examples of such ones. They are inherently personal and often interrelated, so it doesn't make sense to treat them as independent ideas.

In principle, the main configuration file should be a thin layer of the Emacs configuration, even though they can contain some complex pieces.
** Support older versions of Emacs
=when-let= and =if-let= are available in Emacs 25.1, but they have been renamed to =when-let*= and =if-let*= in 26.1, which are correct names to describe their behaviours.

#+begin_src emacs-lisp
  (eval-and-compile
    (when (version< emacs-version "26")
      (with-no-warnings
        (defalias 'when-let* #'when-let)
        (function-put #'when-let* 'lisp-indent-function 1)
        (defalias 'if-let* #'if-let)
        (function-put #'if-let* 'lisp-indent-function 2))))
#+end_src

** Before using =use-package=
These packages are required in other use-package directives declared in this
configuration.

Save efforts to configure individual variable files using no-littering

#+begin_src emacs-lisp
(use-package no-littering
  :init
  (setq no-littering-var-directory
        (expand-file-name ".cache" user-emacs-directory)))
#+end_src

Use the executable path from the shell

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :init
  (exec-path-from-shell-initialize))
#+end_src

Use diminish to reduce clutters from the modeline. This adds support for =:diminish= keyword:

#+begin_src emacs-lisp
  (use-package diminish
    :init
    (diminish 'auto-revert-mode)
    (diminish 'outline-minor-mode)
    (diminish 'flyspell-mode))
#+end_src

Deprecated: Allow installation of system packages via use-package

#+begin_src emacs-lisp
  (use-package system-packages)

  (use-package use-package-ensure-system-package)
#+end_src

Define a custom function for defining frame subjects.

#+begin_src emacs-lisp
  (defmacro akirak/define-frame-workflow (name &rest args)
    (declare (indent 1))
    `(with-eval-after-load 'frame-workflow
       (frame-workflow-define-subject ,name ,@args)))
#+end_src
** Overriding defaults
These settings don't depend on external dependencies, so they should be applied earlier.

#+begin_src emacs-lisp
  (akirak/require 'setup-defaults t)
#+end_src

** Keybindings infrastructure

Use general.el to define keybindings. It has made several improvements over
bind-key, including a built-in support for which-key.

#+begin_src emacs-lisp
  (use-package general)
#+end_src

This also adds support for =:general= keyword in use-package directives

Allow use of =:wk= keyword in general.el keybinding definitions

#+begin_src emacs-lisp
  (akirak/require 'setup-which-key t)
#+end_src

*** Repeatable keys

Hopefully, defrepeater is soon going to be integrated with general

#+begin_src emacs-lisp
  (akirak/require 'setup-defrepeater t)
#+end_src

*** Custom definers
**** Per-mode hydra
As it is hard to remember workflow for every programming language, I've decided to set up a hydra for each programming language I use. Frequently-used commands specific to a major mode should be added to the hydra for its language. All mode hydras should share the same keybinding, which is currently ~C-d~.

I added a function =akirak/bind-mode-hydra= which binds a per-mode hydra for on the key. It takes the name of the major mode and binds the key to =akirak/MODE-hydra/body=. This is not a precisely keybinding definer but plays a somewhat similar role.

#+begin_src emacs-lisp
  (defcustom akirak/mode-hydra-key (kbd "C-c d")
    "Key sequence to access the hydra for the current mode.")

  (defun akirak/bind-mode-hydra (mode &optional hydra-function)
    (let ((map (intern (concat (symbol-name mode) "-map"))))
      (define-key (symbol-value map) akirak/mode-hydra-key
        (or hydra-function
            (intern (format "akirak/%s-hydra/body" mode))))))
#+end_src
**** Generic definer
#+begin_src emacs-lisp
  (general-create-definer akirak/bind-key)
#+end_src
**** Prefix for customizing Emacs
I often need to tweak Emacs while I am using it.

#+begin_src emacs-lisp
  (general-create-definer akirak/bind-customize-map :prefix "C-x c")
#+end_src

There are not so many commands that need to be add to the map:

#+begin_src emacs-lisp
  (akirak/bind-customize-map
    "" '(nil :wk "customize")
    "f" #'customize-face-other-window
    "g" #'customize-group-other-window
    "l" #'load-library
    "p" '((lambda () (interactive)
            (if (featurep 'straight)
                (call-interactively 'straight-use-package)
              (package-list-packages)))
          :wk "packages")
    "s" #'customize-set-value
    "v" #'customize-variable-other-window)
#+end_src
**** Search commands
#+begin_src emacs-lisp
  (general-create-definer akirak/bind-search-map :prefix "M-s")
#+end_src

**** Global org map
#+begin_src emacs-lisp
  (general-create-definer akirak/bind-global-org-map
    :prefix "C-M-o")
#+end_src
**** Contextual keys
#+begin_src emacs-lisp
  (defmacro akirak/define-contextual-key (key &rest general-defs)
    (declare (indent 1))
    (macroexp-progn
     (cl-loop for (def . context) in general-defs
              collect (cons 'general-define-key
                            (append context
                                    (list key def))))))
#+end_src

** Dependencies for other packages
These packages may be required by other packages loaded later on.
*** Ivy
#+begin_src emacs-lisp
  (akirak/require 'setup-ivy t)
#+end_src
*** Helm
#+begin_src emacs-lisp
  (akirak/require 'setup-helm t)
#+end_src
*** Hydra
#+begin_src emacs-lisp
(use-package hydra)
#+end_src
*** ov (overlays)
#+begin_src emacs-lisp
(use-package ov
  :straight (ov :host github :repo "ShingoFukuyama/ov.el"))
#+end_src
*** ts (date-time library by alphapapa)
#+begin_src emacs-lisp
  (use-package ts
    :straight (ts :host github :repo "alphapapa/ts.el"))
#+end_src
** A bunch of useful features
#+begin_src emacs-lisp
  (dolist (feature '(setup-shell-bindings ; Make ~C-a~, ~C-w~,  ~C-h~, etc. behave like in shells
                     setup-key-translation ; Translate certain key combinations for ergonomics
                     setup-keybindings     ; My global keybindings
                     setup-counsel         ; Basic Counsel commands
                     setup-swiper ; Incremental search through the buffer using Ivy
                     setup-ivy-filthy-rich ; Provide more information via Ivy/Counsel commands
                     setup-ivy-frame-actions ; Add frame-creation actions to Ivy
                     setup-magit       ; The Git porcelain for Emacs
                     setup-company     ; Auto completion
                     setup-dired       ; File browser
                     setup-aweshell    ; Enhance eshell
                     setup-rename      ; Utilities for rename operations
                     setup-crux ; Collection of utilities with modifications
                     setup-google-translate ; Translate a word in a buffer
                     ;; setup-japanese
                     setup-helm-descbinds
                     setup-helm-make
                     setup-anzu
                     setup-org-make-toc
                     setup-unpackaged
                     ))
    (akirak/require feature))
#+end_src

The following packages are enhancements to Emacs that don't require much configuration:

#+begin_src emacs-lisp
  (use-package smex) ; Install smex for sorting M-x candidates
  (use-package savehist)                  ; Save minibuffer history
  (use-package helm-system-packages :after helm ; Install system packages
    :commands (helm-system-packages))
  (use-package helm-systemd :after helm   ; Run (root) systemd operations
    :commands (helm-systemd))
  (use-package hl-todo
    :hook (prog-mode . hl-todo-mode))
#+end_src

*** Dired
**** Hydra
#+begin_src emacs-lisp
  (defhydra akirak/dired-mode-hydra ()
    ""
    ("r" dired-rsync))

  (akirak/bind-mode-hydra 'dired-mode)
#+end_src
**** Frame
#+begin_src emacs-lisp
  (akirak/define-frame-workflow "dired"
    :key "d"
    :make-frame
    '(frame-purpose-make-mode-frame 'dired-mode)
    :layout
    '(when (fboundp 'ibuffer-sidebar-show-sidebar)
       (ibuffer-sidebar-show-sidebar)))
#+end_src
*** Magit
The following packages extend the display of =magit-status=:

- magit-todos
- magithub
**** magit-todos
#+begin_src emacs-lisp
  (use-package magit-todos :after (magit hl-todo)
    :straight (magit-todos :host github :repo "alphapapa/magit-todos")
    :config
    (magit-todos-mode 1))
#+end_src
**** magithub
As magithub slows down magit-status, it sometimes causes problems,
and I don't always need its features, I will disable it by default.
I will load =setup-magithub= library if I need it.
*** Forge
#+begin_src emacs-lisp
  (use-package forge
    ;; Depends on emacsql-sqlite
    :disabled t
    :straight (forge :host github :repo "magit/forge"))
#+end_src
*** Chrome
#+begin_src emacs-lisp
(use-package atomic-chrome
  :disabled t
  :init
  (atomic-chrome-start-server))
#+end_src
*** Switching windows
**** Switching to an Org window
#+begin_src emacs-lisp
  (defvar org-select-window-last-window nil)

  (defun org-select-window (arg)
    (interactive "P")
    (if arg
        (progn
          (when org-select-window-last-window
            (select-window org-select-window-last-window)
            (setq org-select-window-last-window nil)))
      (let* ((wlist (window-list))
             (i0 (-elem-index (selected-window) wlist))
             (queue (append (-slice wlist (1+ i0))
                            (-take i0 wlist)))
             (w (-find (lambda (w)
                         (with-current-buffer (window-buffer w)
                           (derived-mode-p 'org-mode)))
                       queue)))
        (if w
            (progn
              (unless (derived-mode-p 'org-mode)
                (setq org-select-window-last-window (selected-window)))
              (select-window w))
          (message "No other org window in this frame")))))
#+end_src

** Programming languages
Ideally, this section should be a portfolio of my skills.
*** Emacs Lisp
#+begin_src emacs-lisp
(akirak/require 'setup-emacs-lisp)
#+end_src
**** Hydra
#+begin_src emacs-lisp
  (defhydra akirak/emacs-lisp-mode-hydra (:exit t :hint nil)
    "
  emacs-lisp

  ^^Point/last sexp  ^^Buffer          ^^Help/doc
  ^^---------------  ^^--------------  ----------
  _._ helpful        _e_ eval          _i_ info symbol
  _m_ macroexp       _l_ package-lint  _s_ suggest

  "
    ("i" counsel-info-lookup-symbol)
    ("s" suggest)
    ("." helpful-at-point)
    ("e" akirak/eval-buffer-or-load-file)
    ("l" package-lint-current-buffer)
    ("m" pp-macroexpand-last-sexp)
    ("q" nil "quit"))

  (akirak/bind-mode-hydra 'emacs-lisp-mode)
#+end_src
**** Frame
#+begin_src emacs-lisp
  (akirak/define-frame-workflow "emacs-lisp"
    :key "e"
    :make-frame '(frame-purpose-make-mode-frame 'emacs-lisp-mode))
#+end_src
**** EMake
#+begin_src emacs-lisp
  (akirak/require 'setup-emake)
#+end_src
** Meta
*** TODO Import from the previous configuration
#+begin_src emacs-lisp
  (let ((old-init-file (expand-file-name "old-init.el" user-emacs-directory)))
    (load-file old-init-file)
    (run-with-timer 3 nil
                    `(lambda ()
                       (message "The previous configuration files (%s) still exist. I have to migrate them soon."
                                (abbreviate-file-name ,old-init-file)))))
#+end_src

Review config in the following directories:

- [X] keybindings
- [ ] progmodes
- [ ] org
- [ ] ui
- [ ] apps
- [ ] coding
- [ ] etc
- [ ] exwm
- [X] international
- [ ] local
- [ ] misc
- [ ] x

The following modules require further review:

- [ ] [[file:setup/setup-dired.el]]
- [ ] [[file:setup/setup-keybindings.el]]

