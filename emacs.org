#+title: Emacs

See also [[file:README.org]]

* Contents :noexport:
:PROPERTIES:
:TOC:      this
:END:
  -  [[#policies][Policies]]
    -  [[#menu-key-for-help][Menu key for help]]
  -  [[#tips][Tips]]
    -  [[#manage-local-and-remote-repositories][Manage local and remote repositories]]
      -  [[#use-helm-repom-to-open-a-repository][Use =helm-repom= to open a repository]]
      -  [[#cleaning-up-the-list][Cleaning up the list]]
    -  [[#scratch-buffers][Scratch buffers]]
    -  [[#check-todos][Check todos]]
      -  [[#navigate-through-a-buffer-by-todo-keywords][Navigate through a buffer by todo keywords]]
      -  [[#magit-todos][magit-todos]]
    -  [[#ibuffer-sidebar-and-dired-sidebar][ibuffer-sidebar and dired-sidebar]]
      -  [[#dired-sidebar][dired-sidebar]]
      -  [[#ibuffer-sidebar][ibuffer-sidebar]]
    -  [[#search][Search]]
    -  [[#editing-org-mode][Editing org-mode]]
      -  [[#graphics-and-images-in-org-mode][Graphics and images in Org Mode]]
    -  [[#using-pandoc-for-document-conversion][Using pandoc for document conversion]]
    -  [[#japanese-support-through-katawa][Japanese support through Katawa]]
  -  [[#issues][Issues]]

* Policies                                                           :policy:
:PROPERTIES:
:TOC:      1
:END:
** Keybindings for browsing                                     :keybinding:
Some Emacs applications display a list of items and let you browse them. These applications innclude dired, magit, and "sidebar" applications. You might sometimes prefer switching focus to a browsed item, but otherwise you might prefer keeping focus. You need separate bindings for opening an item. I basically prefer the following bindings for this kind of commands:

- ~RET~ to open an item and switch focus
- ~SPC~ to open an item in another window but keep focus in the original window

These bindings are applicable to the following major modes in my configuration:

- magit-status (including magit-todos)
- dired-sidebar
** Menu key for help                            :help:keybinding:microhabit:
Use ~<menu>~ key as a prefix for alternative help commands. Especially, the following kinds of commands should bound on this prefix:

- Help/referencing commands specific to modes of the current buffer.
- Dictionary commands (for natural languages).

There is already ~<f1>~ (or ~C-h~ by default) for help commands, but these are about Emacs. If you want to get a context-specific help, try ~<menu>~.

*** Tutorial hydra                       :microhabit:keybinding:help:hydra:
By convention, ~<menu> h~ should be bound to a Hydra command for the major mode.
** org-capture templates                     :Org_Mode:note_taking:org__protocol:
*** org-default-notes vs. the clock target
My =org-capture-templates= variable is configured to allow quickly capturing certain kinds of information to some location. Some location means the clocked task when there is a running clock and otherwise =org-default-notes-file=. This was inspired from [[http://www.howardism.org/Technical/Emacs/capturing-content.html][Capturing Content for Emacs]]:

| Type              | Clock | Default |
|-------------------+-------+---------|
| Task (entry)      | ~t~   | ~dt~    |
| Plain             | ~a~   | N/A     |
| List item         | ~i~   | N/A     |
| org-protocol link | ~L~   | ~dL~    |
| org-protocol note | ~p~   | ~dp~    |

A few notes:

- When no running clock is running, templates with the default target (beginning with ~d~) are "lifted" to keys without the prefix. You can use ~t~ to create a task, ~L~ to create a protocol, etc.
- When no clock is running, the protocol link template creates an entry in the default file. When a clock is running, the protocol link template creates an item under the clocked task.

These templates are configured through =org-starter-initial-capture-templates= variable in my =org-starter= package ([[file:org/init-org-starter.el]]), because I also configure some other templates elsewhere using =org-starter=. Also note that this variable is set using =general-setq=.
**** TODO org-protocol
Configure org-protocol properly. The current templates may not work.
*** Templates to specific files
Templates that capture into specific files can be configured within =org-starter-define-file=. Use =:capture= option.
* Tips
:PROPERTIES:
:TOC:      2
:END:
** Manage local and remote repositories
:PROPERTIES:
:ID:       96328360-8a53-47d6-afbb-d7b90aaea751
:END:
Use repom package to manage local and remote repositories: [[file:misc/init-repom.el]]
*** Use =helm-repom= to open a repository
I used =counsel-projectile-switch-project= for opening a local repository, but now that I have =repom=, I will use =helm-repom= to open a repository. If a repository is not available locally, then I can clone it from a remote server quickly.

- [[file:misc/init-repom.el]]
*** Cleaning up the list
I have to maintain =projectile-known-projects= regularly:

- [X] Delete duplicates
- [X] Delete projects that no longer exists
- [ ] For repositories in some locations (e.g. straight packages), they should be deleted from the list unless they are in a dirty state

These tasks are completed by =projectile-cleanup-known-projects=. This is triggered by midnight-mode: [[file:misc/init-midnight.el]].
** Scratch buffers                                              :microhabit:
Use scratch buffer extensively: [[file:coding/init-scratch.el]]
** Check todos
[[https://github.com/tarsius/hl-todo][hl-todo]] package highlights todo keywords in buffers: [[file:coding/init-hl-todo.el::(use-package%20hl-todo][init-hl-todo.el]]
*** ARCHIVED Navigate through a buffer by todo keywords        :keybinding:
CLOSED: [2018-07-04 Wed 01:49]
:LOGBOOK:
- State "ARCHIVED"   from "TODO"       [2018-07-04 Wed 01:49] \\
  I probably don't need this feature, as magit-todos provides a todo list.
:END:
Bind keys to the following commands:

- [ ] =hl-todo-next/previous= commands
- [ ] =hl-todo-occur= command
*** magit-todos
[[file:apps/init-magit.el::(use-package%20magit-todos][magit-todos]] enhances =magit-status= to show todo items in files in the project.
** ibuffer-sidebar and dired-sidebar
There are several sidebar packages for Emacs. I once used treemacs, which was well-developed, but I don't always need a sidebar, and I don't want to learn new keybindings for less frequently applications. dired-sidebar and ibuffer-sidebar are based on dired and ibuffer respectively, so I will try to use it.

Configuration: [[file:ui/init-sidebar.el]]
*** dired-sidebar
**** DONE Tweak the keybindings in dired-sidebar buffer
CLOSED: [2018-08-12 Sun 05:46]
- [X] ~RET~ to open the file in a non-sidebar window
- [X] ~SPC~ to open the file in a non-sidebar window but keep focus in the sidebar
*** ibuffer-sidebar
**** Add support for frame-purpose.el to ibuffer-sidebar
I've added an experimental support for frame-purpose. This can replace the built-in sidebar of frame-purpose.
** REVIEW Search
:PROPERTIES:
:ID:       9d45eb85-dc93-425c-9564-c4e4b0e0a489
:END:
:LOGBOOK:
- State "REVIEW"     from              [2018-07-04 Wed 15:27]
:END:
- [[file:misc/init-web-search.el::(defun%20akirak/helm-search%20(query)][akirak/helm-search]] command lets you choose a search engine for a given query.
  - This command is bound at ~<menu> ?~ key.
  - This command is also available as an alternative action in =counsel-org-capture-string=.
- [[file:misc/init-web-search.el::(defun%20akirak/helm-search-symbol-at-point%20()][akirak/helm-search-symbol-at-point]] command lets you choose a search engine for a symbol under the cursor.
  - I am not sure if this command is useful though.
** Editing org-mode
*** Graphics and images in Org Mode
:PROPERTIES:
:ID:       d5035d86-4f0f-4e3d-907f-234c117b0061
:END:
**** TODO org-download
**** Generate diagrams using org-babel
- GraphViz
- Ditaa
- PlantUML

** Using pandoc for document conversion
:PROPERTIES:
:ID:       a9cdcd00-68a0-4320-9236-c959a8370ed2
:END:
[[http://pandoc.org/][Pandoc]] is a document converter that supports a wide range of markup formats. As Org is one of its supported exporting formats, you can use pandoc to import documents from several documents to org.
** Japanese support through Katawa
:PROPERTIES:
:ID:       5e04241c-6428-4dbc-8983-6691e02a9104
:END:
:LOGBOOK:
- State "REVIEW"     from "NEXT"       [2018-07-08 Sun 19:44]
CLOCK: [2018-07-08 Sun 18:55]--[2018-07-08 Sun 19:14] =>  0:19
:END:
Because Japanese is my native language, I still have to rely on it for extensive vocabulary. [[file:international/init-katawa.el][katawa.el]] provides limited support for Japanese in a platform-independent manner.

Especially, =katawa-ivy= command is a convenient interface for Japanese. Rather than being a real input method, it can insert a small portion of Japanese text into the buffer without dependencies. Additional actions are configured in [[file:international/init-katawa.el::(ivy-add-actions%20'katawa-ivy][init-katawa.el]].
* Issues
:PROPERTIES:
:TOC:      1
:CUSTOM_ID: issues
:END:
* Deprecated
:PROPERTIES:
:TOC:      ignore
:END:
* Footnotes
:PROPERTIES:
:TOC:      ignore
:END:

# Local Variables:
# org-make-toc: t
# End:
