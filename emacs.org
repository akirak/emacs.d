#+title: Emacs

See also [[file:README.org]]

* Contents :noexport:
:PROPERTIES:
:TOC:      this
:END:
  -  [[#policies][Policies]]
    -  [[#menu-key-for-help][Menu key for help]]
      -  [[#tutorial-hydra][Tutorial hydra]]
    -  [[#projectile-and-remote-repositories][Projectile and remote repositories]]
      -  [[#use-helm-repom-to-open-a-repository][Use =helm-repom= to open a repository]]
      -  [[#cleaning-up-the-list][Cleaning up the list]]
    -  [[#japanese-support-through-katawa][Japanese support through Katawa]]
  -  [[#usage-tips][Usage tips]]
    -  [[#scratch-buffers][Scratch buffers]]
    -  [[#hl-todo][hl-todo]]
      -  [[#navigate-through-a-buffer-by-todo-keywords][Navigate through a buffer by todo keywords]]
      -  [[#magit-todos][magit-todos]]
    -  [[#ibuffer-sidebar-and-dired-sidebar][ibuffer-sidebar and dired-sidebar]]
      -  [[#dired-sidebar][dired-sidebar]]
      -  [[#ibuffer-sidebar][ibuffer-sidebar]]
    -  [[#search][Search]]
  -  [[#issues][Issues]]

* Policies
:PROPERTIES:
:TOC:      2
:END:
** Menu key for help                            :help:keybinding:microhabit:
Use ~<menu>~ key as a prefix for alternative help commands. Especially, the following kinds of commands should bound on this prefix:

- Help/referencing commands specific to modes of the current buffer.
- Dictionary commands (for natural languages).

There is already ~<f1>~ (or ~C-h~ by default) for help commands, but these are about Emacs. If you want to get a context-specific help, try ~<menu>~.

*** Tutorial hydra                       :microhabit:keybinding:help:hydra:
By convention, ~<menu> h~ should be bound to a Hydra command for the major mode.
** Projectile and remote repositories
:PROPERTIES:
:ID:       96328360-8a53-47d6-afbb-d7b90aaea751
:END:
*** Use =helm-repom= to open a repository
I used =counsel-projectile-switch-project= for opening a local repository, but now that I have =repom=, I will use =helm-repom= to open a repository. If a repository is not available locally, then I can clone it from a remote server quickly.

- [[file:misc/init-repom.el]]
*** Cleaning up the list
I have to maintain =projectile-known-projects= regularly:

- [X] Delete duplicates
- [X] Delete projects that no longer exists
- [ ] For repositories in some locations (e.g. straight packages), they should be deleted from the list unless they are in a dirty state

These tasks are completed by =projectile-cleanup-known-projects=. I have to run it regularly.
** REVIEW Japanese support through Katawa
:LOGBOOK:
- State "REVIEW"     from "NEXT"       [2018-07-08 Sun 19:44]
CLOCK: [2018-07-08 Sun 18:55]--[2018-07-08 Sun 19:14] =>  0:19
:END:
Because Japanese is my native language, I still have to rely on it for extensive vocabulary. [[file:international/init-katawa.el][katawa.el]] provides limited support for Japanese in a platform-independent manner.

Especially, =katawa-ivy= command is a convenient interface for Japanese. Rather than being a real input method, it can insert a small portion of Japanese text into the buffer without dependencies. Additional actions are configured in [[file:international/init-katawa.el::(ivy-add-actions%20'katawa-ivy][init-katawa.el]].
* Usage tips
:PROPERTIES:
:TOC:      2
:END:
** Scratch buffers                                              :microhabit:
Use scratch buffer extensively: [[file:coding/init-scratch.el]]
** hl-todo
[[https://github.com/tarsius/hl-todo][hl-todo]] package highlights todo keywords in buffers: [[file:coding/init-hl-todo.el::(use-package%20hl-todo][init-hl-todo.el]]
*** ARCHIVED Navigate through a buffer by todo keywords        :keybinding:
CLOSED: [2018-07-04 Wed 01:49]
:LOGBOOK:
- State "ARCHIVED"   from "TODO"       [2018-07-04 Wed 01:49] \\
  I probably don't need this feature, as magit-todos provides a todo list.
:END:
Bind keys to the following commands:

- [ ] =hl-todo-next/previous= commands
- [ ] =hl-todo-occur= command
*** magit-todos
[[file:apps/init-magit.el::(use-package%20magit-todos][magit-todos]] enhances =magit-status= to show todo items in files in the project.
** ibuffer-sidebar and dired-sidebar
There are several sidebar packages for Emacs. I once used treemacs, which was well-developed, but I don't always need a sidebar, and I don't want to learn new keybindings for less frequently applications. dired-sidebar and ibuffer-sidebar are based on dired and ibuffer respectively, so I will try to use it.

Configuration: [[file:ui/init-sidebar.el]]
*** dired-sidebar
**** TODO Tweak the keybindings in dired-sidebar buffer
- [ ] ~RET~ to open the file in a non-sidebar window
- [ ] ~SPC~ to open the file in a non-sidebar window but keep focus in the sidebar
*** ibuffer-sidebar
**** Add support for frame-purpose.el to ibuffer-sidebar
I've added an experimental support for frame-purpose. This can replace the built-in sidebar of frame-purpose.
** REVIEW Search
:PROPERTIES:
:ID:       9d45eb85-dc93-425c-9564-c4e4b0e0a489
:END:
:LOGBOOK:
- State "REVIEW"     from              [2018-07-04 Wed 15:27]
:END:
- [[file:misc/init-web-search.el::(defun%20akirak/helm-search%20(query)][akirak/helm-search]] command lets you choose a search engine for a given query.
  - This command is bound at ~<menu> ?~ key.
  - This command is also available as an alternative action in =counsel-org-capture-string=.
- [[file:misc/init-web-search.el::(defun%20akirak/helm-search-symbol-at-point%20()][akirak/helm-search-symbol-at-point]] command lets you choose a search engine for a symbol under the cursor.
  - I am not sure if this command is useful though.

* Issues
:PROPERTIES:
:TOC:      1
:END:
* Deprecated
:PROPERTIES:
:TOC:      ignore
:END:
* Footnotes
:PROPERTIES:
:TOC:      ignore
:END:

# Local Variables:
# before-save-hook: org-make-toc
# End:
